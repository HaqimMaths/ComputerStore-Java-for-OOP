/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.alphatechsz.computerstore;

/**
 *
 * @author Haqim
 */

import java.awt.Color;
import javax.swing.*;
import javax.swing.table.*;
public class ComputerMenu extends javax.swing.JFrame {

    /**
     * Creates new form ComputerMenu
     */
    public ComputerMenu() {
        initComponents();
        // Set background color
        getContentPane().setBackground(new Color(164, 219, 232));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        computerTable = new javax.swing.JTable();
        computerPanel = new java.awt.Panel();
        idLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        brandLabel = new javax.swing.JLabel();
        modelLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        yearLabel = new javax.swing.JLabel();
        colorLabel = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        brandField = new javax.swing.JTextField();
        modelField = new javax.swing.JTextField();
        typeField = new javax.swing.JTextField();
        sizeField = new javax.swing.JTextField();
        colorField = new javax.swing.JTextField();
        yearField = new javax.swing.JTextField();
        priceField = new javax.swing.JTextField();
        cpuLabel = new javax.swing.JLabel();
        gpuLabel = new javax.swing.JLabel();
        motherboardLabel = new javax.swing.JLabel();
        storageLabel = new javax.swing.JLabel();
        ramLabel = new javax.swing.JLabel();
        cpuField = new javax.swing.JTextField();
        gpuField = new javax.swing.JTextField();
        motherboardField = new javax.swing.JTextField();
        storageField = new javax.swing.JTextField();
        ramField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        addToOrderButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Computer Menu");
        setIconImage(new ImageIcon("C:\\Users\\Haqim\\Documents\\Management and Science University\\OOP\\LAB REPORT (A3)\\ComputerStore\\src\\main\\java\\com\\alphatechsz\\computerstore\\AlphaTechszLogo.png").getImage());
        setLocation(new java.awt.Point(0, 0));

        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 24)); // NOI18N
        jLabel1.setText("Computer Menu");

        String[] columnNames = {"No", "ID", "Brand", "Model", "Type",
            "Size", "Color", "Year", "CPU", "GPU", "Motherboard",
            "Storage(GB)", "RAM(GB)", "Price(RM)"
        };

        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        int index = 0;
        for(Product product : Inventory.products){
            if(product.getCategory().equalsIgnoreCase("Computer")){
                Computer computer = (Computer) product;
                model.addRow(new Object[] {++index, computer.getID(), computer.getBrand(),
                    computer.getModel(), computer.getType(), computer.getSize(),
                    computer.getColor(), computer.getManufactureYear(),
                    computer.getTypeCPU(), computer.getTypeGPU(),
                    computer.getTypeMotherboard(), computer.getSizeStorage(), computer.getSizeRAM(),
                    computer.getPrice()});
        }
    }
    computerTable.setModel(model);
    computerTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            computerTableMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(computerTable);

    idLabel.setText("ID:");

    idField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            idFieldActionPerformed(evt);
        }
    });

    brandLabel.setText("Brand:");

    modelLabel.setText("Model:");

    priceLabel.setText("Price (RM):");

    yearLabel.setText("Year:");

    colorLabel.setText("Color:");

    sizeLabel.setText("Size:");

    typeLabel.setText("Type:");

    cpuLabel.setText("CPU:");

    gpuLabel.setText("GPU:");

    motherboardLabel.setText("Motherboard:");

    storageLabel.setText("Storage:");

    ramLabel.setText("RAM:");

    motherboardField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            motherboardFieldActionPerformed(evt);
        }
    });

    ramField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ramFieldActionPerformed(evt);
        }
    });

    addButton.setText("Add");
    addButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addButtonActionPerformed(evt);
        }
    });

    updateButton.setText("Update");
    updateButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateButtonActionPerformed(evt);
        }
    });

    deleteButton.setText("Delete");
    deleteButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteButtonActionPerformed(evt);
        }
    });

    addToOrderButton.setText("Add to Order");
    addToOrderButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addToOrderButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout computerPanelLayout = new javax.swing.GroupLayout(computerPanel);
    computerPanel.setLayout(computerPanelLayout);
    computerPanelLayout.setHorizontalGroup(
        computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(computerPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(computerPanelLayout.createSequentialGroup()
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(yearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(idField, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                        .addComponent(yearField))
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addGap(100, 100, 100)
                            .addComponent(brandField, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addGap(45, 45, 45)
                            .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(computerPanelLayout.createSequentialGroup()
                                    .addComponent(cpuLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(cpuField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(brandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGap(26, 26, 26)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addComponent(modelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(modelField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addComponent(gpuLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(gpuField)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addComponent(typeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(22, 22, 22)
                            .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addComponent(motherboardLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(motherboardField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(28, 28, 28)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addComponent(sizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(colorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(23, 23, 23)
                            .addComponent(colorField, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addComponent(storageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(storageField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ramLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(27, 27, 27)
                            .addComponent(ramField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(15, 15, 15))
                .addGroup(computerPanelLayout.createSequentialGroup()
                    .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(48, 48, 48)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(updateButton)
                    .addGap(18, 18, 18)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(addToOrderButton)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );
    computerPanelLayout.setVerticalGroup(
        computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(computerPanelLayout.createSequentialGroup()
            .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(computerPanelLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(idLabel))
                .addGroup(computerPanelLayout.createSequentialGroup()
                    .addGap(17, 17, 17)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(brandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(brandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(modelLabel)
                        .addComponent(modelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(typeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sizeLabel)
                        .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(colorLabel)
                        .addComponent(colorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGap(24, 24, 24)
            .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearLabel)
                    .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpuLabel)
                    .addComponent(cpuField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gpuLabel)
                    .addComponent(gpuField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(motherboardLabel)
                    .addComponent(motherboardField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(storageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(storageLabel))
                .addGroup(computerPanelLayout.createSequentialGroup()
                    .addGap(4, 4, 4)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ramLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ramField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGap(23, 23, 23)
            .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(updateButton)
                    .addComponent(deleteButton)
                    .addComponent(addToOrderButton))
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceLabel)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(42, Short.MAX_VALUE))
    );

    backButton.setText("Back");
    backButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            backButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(computerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(517, 517, 517)
                    .addComponent(jLabel1))
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1084, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(512, 512, 512)
                    .addComponent(backButton)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addGap(18, 18, 18)
            .addComponent(computerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(backButton)
            .addContainerGap(33, Short.MAX_VALUE))
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void computerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_computerTableMouseClicked
        // Declare model of computerTable
        // Set the input fields to the current selected product data
        DefaultTableModel computerTableModel = (DefaultTableModel) computerTable.getModel();
        idField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 1).toString());
        brandField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 2).toString());
        modelField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 3).toString());
        typeField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 4).toString());
        sizeField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 5).toString());
        colorField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 6).toString());
        yearField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 7).toString());
        cpuField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 8).toString());
        gpuField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 9).toString());
        motherboardField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 10).toString());
        storageField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 11).toString());
        ramField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 12).toString());
        priceField.setText(computerTableModel.getValueAt(computerTable.getSelectedRow(), 13).toString());
    }//GEN-LAST:event_computerTableMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Delete the current product from the inventory
        DefaultTableModel computerTableModel = (DefaultTableModel) computerTable.getModel();
        if(computerTable.getSelectedRowCount()==1){
            Product foundComputer = Inventory.products.stream().filter(computer -> computer.getID() == Integer.parseInt(computerTableModel.getValueAt(computerTable.getSelectedRow(), 1).toString())).findFirst().orElse(null);
            Inventory.products.removeIf(computer -> computer.getID() == foundComputer.getID() && computer.getModel().equals(foundComputer.getModel()));
            computerTableModel.removeRow(computerTable.getSelectedRow());
            computerTableModel.setRowCount(0);
            int index = 0;
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("Computer")){
                    Computer computer = (Computer) product;
                    computerTableModel.addRow(new Object[] {++index, computer.getID(), computer.getBrand(),
                        computer.getModel(), computer.getType(), computer.getSize(),
                        computer.getColor(), computer.getManufactureYear(),
                        computer.getTypeCPU(), computer.getTypeGPU(),
                        computer.getTypeMotherboard(), computer.getSizeStorage(), computer.getSizeRAM(),
                        computer.getPrice()});
                }
            }
            idField.setText("");
            brandField.setText("");
            modelField.setText("");
            typeField.setText("");
            sizeField.setText("");
            colorField.setText("");
            yearField.setText("");
            cpuField.setText("");
            gpuField.setText("");
            motherboardField.setText("");
            storageField.setText("");
            ramField.setText("");
            priceField.setText("");
            JOptionPane.showMessageDialog(this, "Successfully Deleted", "Delete computer", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a product", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // Update the current product data
        DefaultTableModel computerTableModel = (DefaultTableModel) computerTable.getModel();
        // Check if one the input fields is empty
        if(!(idField.getText().isEmpty() == true || brandField.getText().isEmpty() == true || modelField.getText().isEmpty() == true || typeField.getText().isEmpty() == true
                || sizeField.getText().isEmpty() == true || colorField.getText().isEmpty() == true || yearField.getText().isEmpty() == true || cpuField.getText().isEmpty() == true
                || gpuField.getText().isEmpty() == true || motherboardField.getText().isEmpty() == true || storageField.getText().isEmpty() || ramField.getText().isEmpty() == true
                || priceField.getText().isEmpty() == true)){
            int ID = Integer.parseInt(idField.getText());
            String brand = brandField.getText();
            String model = modelField.getText();
            String type = typeField.getText();
            String size = sizeField.getText();
            String color = colorField.getText();
            int year = Integer.parseInt(yearField.getText());
            String cpu = cpuField.getText();
            String gpu = gpuField.getText();
            String motherboard = motherboardField.getText();
            int storage = Integer.parseInt(storageField.getText());
            int ram = Integer.parseInt(ramField.getText());
            double price = Double.parseDouble(priceField.getText());
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("Computer") && product.getID() == Integer.parseInt(computerTableModel.getValueAt(computerTable.getSelectedRow(), 1).toString())){
                    Computer computer = (Computer) product;
                    computer.setID(ID);
                    computer.setBrand(brand);
                    computer.setModel(model);
                    computer.setType(type);
                    computer.setSize(size);
                    computer.setColor(color);
                    computer.setManufactureYear(year);
                    computer.setTypeCPU(cpu);
                    computer.setTypeGPU(gpu);
                    computer.setTypeMotherboard(motherboard);
                    computer.setSizeStorage(storage);
                    computer.setSizeRAM(ram);
                    computer.setPrice(price);
                    break;
                }
            }
            computerTableModel.setRowCount(0);
            int index = 0;
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("Computer")){
                    Computer computer = (Computer) product;
                    computerTableModel.addRow(new Object[] {++index, computer.getID(), computer.getBrand(),
                        computer.getModel(), computer.getType(), computer.getSize(),
                        computer.getColor(), computer.getManufactureYear(),
                        computer.getTypeCPU(), computer.getTypeGPU(),
                        computer.getTypeMotherboard(), computer.getSizeStorage(), computer.getSizeRAM(),
                        computer.getPrice()});
                }
            }
            idField.setText("");
            brandField.setText("");
            modelField.setText("");
            typeField.setText("");
            sizeField.setText("");
            colorField.setText("");
            yearField.setText("");
            cpuField.setText("");
            gpuField.setText("");
            motherboardField.setText("");
            storageField.setText("");
            ramField.setText("");
            priceField.setText("");
            JOptionPane.showMessageDialog(this, "Successfully Updated", "Updated the computer", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Please fill up all the values!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Add the product to the inventory
        // Check if one the input fields is empty
        if(!(idField.getText().isEmpty() == true || brandField.getText().isEmpty() == true || modelField.getText().isEmpty() == true || typeField.getText().isEmpty() == true
                || sizeField.getText().isEmpty() == true || colorField.getText().isEmpty() == true || yearField.getText().isEmpty() == true || cpuField.getText().isEmpty() == true
                || gpuField.getText().isEmpty() == true || motherboardField.getText().isEmpty() == true || storageField.getText().isEmpty() || ramField.getText().isEmpty() == true
                || priceField.getText().isEmpty() == true)){
            int ID = Integer.parseInt(idField.getText());
            String brand = brandField.getText();
            String model = modelField.getText();
            String type = typeField.getText();
            String size = sizeField.getText();
            String color = colorField.getText();
            int year = Integer.parseInt(yearField.getText());
            String cpu = cpuField.getText();
            String gpu = gpuField.getText();
            String motherboard = motherboardField.getText();
            int storage = Integer.parseInt(storageField.getText());
            int ram = Integer.parseInt(ramField.getText());
            double price = Double.parseDouble(priceField.getText());
            Inventory.products.add(new Computer(ID, brand, model, type, size, color, year, cpu, gpu, motherboard, storage, ram, price));
            DefaultTableModel computerTableModel = (DefaultTableModel) computerTable.getModel();
            computerTableModel.setRowCount(0);
            int index = 0;
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("Computer")){
                    Computer computer = (Computer) product;
                    computerTableModel.addRow(new Object[] {++index, computer.getID(), computer.getBrand(),
                        computer.getModel(), computer.getType(), computer.getSize(),
                        computer.getColor(), computer.getManufactureYear(),
                        computer.getTypeCPU(), computer.getTypeGPU(),
                        computer.getTypeMotherboard(), computer.getSizeStorage(), computer.getSizeRAM(),
                        computer.getPrice()});
                }
            }
            idField.setText("");
            brandField.setText("");
            modelField.setText("");
            typeField.setText("");
            sizeField.setText("");
            colorField.setText("");
            yearField.setText("");
            cpuField.setText("");
            gpuField.setText("");
            motherboardField.setText("");
            storageField.setText("");
            ramField.setText("");
            priceField.setText("");
            JOptionPane.showMessageDialog(this, "Successfully Added", "Computer Added", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Please fill up all the values!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void ramFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ramFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ramFieldActionPerformed

    private void motherboardFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motherboardFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motherboardFieldActionPerformed

    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idFieldActionPerformed

    private void addToOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToOrderButtonActionPerformed
        // Add the product to the order
        DefaultTableModel computerTableModel = (DefaultTableModel) computerTable.getModel();
        // Check if the user selected a product
        if(computerTable.getSelectedRowCount()==1){
            Product foundComputer = Inventory.products.stream().filter(computer -> computer.getID() == Integer.parseInt(computerTableModel.getValueAt(computerTable.getSelectedRow(), 1).toString())).findFirst().orElse(null);
            Order.products.add(foundComputer);
            Inventory.products.removeIf(computer -> computer.getID() == foundComputer.getID() && computer.getModel().equals(foundComputer.getModel()));
            computerTableModel.removeRow(computerTable.getSelectedRow());
            computerTableModel.setRowCount(0);
            int index = 0;
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("Computer")){
                    Computer computer = (Computer) product;
                    computerTableModel.addRow(new Object[] {++index, computer.getID(), computer.getBrand(),
                        computer.getModel(), computer.getType(), computer.getSize(),
                        computer.getColor(), computer.getManufactureYear(),
                        computer.getTypeCPU(), computer.getTypeGPU(),
                        computer.getTypeMotherboard(), computer.getSizeStorage(), computer.getSizeRAM(),
                        computer.getPrice()});
                }
            }
            idField.setText("");
            brandField.setText("");
            modelField.setText("");
            typeField.setText("");
            sizeField.setText("");
            colorField.setText("");
            yearField.setText("");
            cpuField.setText("");
            gpuField.setText("");
            motherboardField.setText("");
            storageField.setText("");
            ramField.setText("");
            priceField.setText("");
            JOptionPane.showMessageDialog(this, "Successfully Added to Order", "Computer added to order", JOptionPane.INFORMATION_MESSAGE);
        } else{
            JOptionPane.showMessageDialog(this, "Please select a product", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addToOrderButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // Close the current window and back to the main menu
        this.dispose();
        MainMenu mainMenu = new MainMenu();
        mainMenu.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComputerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComputerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComputerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComputerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComputerMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addToOrderButton;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField brandField;
    private javax.swing.JLabel brandLabel;
    private javax.swing.JTextField colorField;
    private javax.swing.JLabel colorLabel;
    private java.awt.Panel computerPanel;
    private javax.swing.JTable computerTable;
    private javax.swing.JTextField cpuField;
    private javax.swing.JLabel cpuLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField gpuField;
    private javax.swing.JLabel gpuLabel;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField modelField;
    private javax.swing.JLabel modelLabel;
    private javax.swing.JTextField motherboardField;
    private javax.swing.JLabel motherboardLabel;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField ramField;
    private javax.swing.JLabel ramLabel;
    private javax.swing.JTextField sizeField;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JTextField storageField;
    private javax.swing.JLabel storageLabel;
    private javax.swing.JTextField typeField;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField yearField;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables
}
