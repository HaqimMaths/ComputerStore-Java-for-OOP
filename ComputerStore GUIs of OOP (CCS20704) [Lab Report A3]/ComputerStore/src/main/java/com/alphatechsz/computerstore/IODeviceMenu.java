/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.alphatechsz.computerstore;

/**
 *
 * @author Haqim
 */

import java.awt.Color;
import javax.swing.*;
import javax.swing.table.*;

public class IODeviceMenu extends javax.swing.JFrame {

    /**
     * Creates new form IODeviceMenu
     */
    public IODeviceMenu() {
        initComponents();
        // Set background color
        getContentPane().setBackground(new Color(164, 219, 232));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        computerPanel = new java.awt.Panel();
        idLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        brandLabel = new javax.swing.JLabel();
        modelLabel = new javax.swing.JLabel();
        bluetoothLabel = new javax.swing.JLabel();
        yearLabel = new javax.swing.JLabel();
        colorLabel = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        brandField = new javax.swing.JTextField();
        modelField = new javax.swing.JTextField();
        typeField = new javax.swing.JTextField();
        sizeField = new javax.swing.JTextField();
        colorField = new javax.swing.JTextField();
        yearField = new javax.swing.JTextField();
        bluetoothField = new javax.swing.JTextField();
        maleLabel = new javax.swing.JLabel();
        femaleLabel = new javax.swing.JLabel();
        wiredLabel = new javax.swing.JLabel();
        wirelessUsbLabel = new javax.swing.JLabel();
        maleField = new javax.swing.JTextField();
        femaleField = new javax.swing.JTextField();
        wiredField = new javax.swing.JTextField();
        wirelessUsbField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        addToOrderButton = new javax.swing.JButton();
        priceLabel1 = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ioDeviceTable = new javax.swing.JTable();
        ioDeviceMenuLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IO Device Menu");
        setIconImage(new ImageIcon("C:\\Users\\Haqim\\Documents\\Management and Science University\\OOP\\LAB REPORT (A3)\\ComputerStore\\src\\main\\java\\com\\alphatechsz\\computerstore\\AlphaTechszLogo.png").getImage());

        idLabel.setText("ID:");

        idField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idFieldActionPerformed(evt);
            }
        });

        brandLabel.setText("Brand:");

        modelLabel.setText("Model:");

        bluetoothLabel.setText("Bluetooth:");

        yearLabel.setText("Year:");

        colorLabel.setText("Color:");

        sizeLabel.setText("Size:");

        typeLabel.setText("Type:");

        maleLabel.setText("Male:");

        femaleLabel.setText("Female");

        wiredLabel.setText("Wired:");

        wirelessUsbLabel.setText("Wireless USB:");

        wiredField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wiredFieldActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addToOrderButton.setText("Add to Order");
        addToOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToOrderButtonActionPerformed(evt);
            }
        });

        priceLabel1.setText("Price:");

        javax.swing.GroupLayout computerPanelLayout = new javax.swing.GroupLayout(computerPanel);
        computerPanel.setLayout(computerPanelLayout);
        computerPanelLayout.setHorizontalGroup(
            computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(computerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(computerPanelLayout.createSequentialGroup()
                        .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(yearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(idField, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(yearField))
                        .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(computerPanelLayout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(brandField, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(computerPanelLayout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(brandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(computerPanelLayout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(maleLabel)
                                .addGap(18, 18, 18)
                                .addComponent(maleField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(computerPanelLayout.createSequentialGroup()
                                .addComponent(modelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modelField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(computerPanelLayout.createSequentialGroup()
                                .addComponent(femaleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(femaleField)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(typeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wiredLabel))
                        .addGap(22, 22, 22)
                        .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wiredField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(computerPanelLayout.createSequentialGroup()
                                .addComponent(sizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(colorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(colorField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15))
                            .addGroup(computerPanelLayout.createSequentialGroup()
                                .addComponent(wirelessUsbLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(wirelessUsbField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bluetoothLabel)
                                .addGap(18, 18, 18)
                                .addComponent(bluetoothField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16))))
                    .addGroup(computerPanelLayout.createSequentialGroup()
                        .addComponent(priceLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateButton)
                        .addGap(18, 18, 18)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addToOrderButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        computerPanelLayout.setVerticalGroup(
            computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(computerPanelLayout.createSequentialGroup()
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(computerPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(idLabel))
                    .addGroup(computerPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(brandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(brandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modelLabel)
                            .addComponent(modelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sizeLabel)
                            .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(colorLabel)
                            .addComponent(colorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(24, 24, 24)
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearLabel)
                    .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maleLabel)
                    .addComponent(maleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(femaleLabel)
                    .addComponent(femaleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wiredLabel)
                    .addComponent(wiredField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wirelessUsbField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wirelessUsbLabel)
                    .addComponent(bluetoothLabel)
                    .addComponent(bluetoothField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(priceLabel1)
                        .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addButton)
                        .addComponent(updateButton)
                        .addComponent(deleteButton)
                        .addComponent(addToOrderButton)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        String[] columnNames = {"No", "ID", "Brand", "Model", "Type",
            "Size", "Color", "Year", "Male", "Female", "Wired",
            "Wireless USB", "Bluetooth", "Price(RM)"
        };

        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        int index = 0;
        for(Product product : Inventory.products){
            if(product.getCategory().equalsIgnoreCase("IO Device")){
                IODevice ioDevice = (IODevice) product;
                model.addRow(new Object[] {++index, ioDevice.getID(), ioDevice.getBrand(),
                    ioDevice.getModel(), ioDevice.getType(), ioDevice.getSize(),
                    ioDevice.getColor(), ioDevice.getManufactureYear(),
                    ioDevice.getMaleConnector(), ioDevice.getFemaleConnector(),
                    ioDevice.getWiredConnection(), ioDevice.getWirelessUsbConnection(),
                    ioDevice.getBluetoothConnection(), ioDevice.getPrice()});
        }
    }
    ioDeviceTable.setModel(model);
    ioDeviceTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            ioDeviceTableMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(ioDeviceTable);

    ioDeviceMenuLabel.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 24)); // NOI18N
    ioDeviceMenuLabel.setText("IO Device Menu");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(computerPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createSequentialGroup()
                    .addGap(462, 462, 462)
                    .addComponent(ioDeviceMenuLabel)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(backButton)
            .addGap(520, 520, 520))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(16, 16, 16)
            .addComponent(ioDeviceMenuLabel)
            .addGap(31, 31, 31)
            .addComponent(computerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(backButton)
            .addContainerGap(84, Short.MAX_VALUE))
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idFieldActionPerformed

    private void wiredFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wiredFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wiredFieldActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Add product to the inventory and the table
        // Check if one of the fields is empty
        if(!(idField.getText().isEmpty() == true || brandField.getText().isEmpty() == true || modelField.getText().isEmpty() == true || typeField.getText().isEmpty() == true
                || sizeField.getText().isEmpty() == true || colorField.getText().isEmpty() == true || yearField.getText().isEmpty() == true || maleField.getText().isEmpty() == true
                || femaleField.getText().isEmpty() == true || wiredField.getText().isEmpty() == true || wirelessUsbField.getText().isEmpty() || bluetoothField.getText().isEmpty() == true
                || priceField.getText().isEmpty() == true)){
            int ID = Integer.parseInt(idField.getText());
            String brand = brandField.getText();
            String model = modelField.getText();
            String type = typeField.getText();
            String size = sizeField.getText();
            String color = colorField.getText();
            int year = Integer.parseInt(yearField.getText());
            String male = maleField.getText();
            String female = femaleField.getText();
            boolean wired = Boolean.parseBoolean(wiredField.getText());
            boolean wirelessUsb = Boolean.parseBoolean(wirelessUsbField.getText());
            boolean bluetooth = Boolean.parseBoolean(bluetoothField.getText());
            double price = Double.parseDouble(priceField.getText());
            Inventory.products.add(new IODevice(ID, brand, model, type, size, color, year, male, female, wired, wirelessUsb, bluetooth, price));
            DefaultTableModel ioDeviceTableModel = (DefaultTableModel) ioDeviceTable.getModel();
            ioDeviceTableModel.setRowCount(0);
            int index = 0;
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("IO Device")){
                    IODevice ioDevice = (IODevice) product;
                    ioDeviceTableModel.addRow(new Object[] {++index, ioDevice.getID(), ioDevice.getBrand(),
                        ioDevice.getModel(), ioDevice.getType(), ioDevice.getSize(),
                        ioDevice.getColor(), ioDevice.getManufactureYear(),
                        ioDevice.getMaleConnector(), ioDevice.getFemaleConnector(),
                        ioDevice.getWiredConnection(), ioDevice.getWirelessUsbConnection(),
                        ioDevice.getBluetoothConnection(), ioDevice.getPrice()});
                }
            }
            idField.setText("");
            brandField.setText("");
            modelField.setText("");
            typeField.setText("");
            sizeField.setText("");
            colorField.setText("");
            yearField.setText("");
            maleField.setText("");
            femaleField.setText("");
            wiredField.setText("");
            wirelessUsbField.setText("");
            bluetoothField.setText("");
            priceField.setText("");
            JOptionPane.showMessageDialog(this, "Successfully Added", "IO Device has been added", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Please fill up all the values!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // Update the current product data
        DefaultTableModel ioDeviceTableModel = (DefaultTableModel) ioDeviceTable.getModel();
        if(!(idField.getText().isEmpty() == true || brandField.getText().isEmpty() == true || modelField.getText().isEmpty() == true || typeField.getText().isEmpty() == true
                || sizeField.getText().isEmpty() == true || colorField.getText().isEmpty() == true || yearField.getText().isEmpty() == true || maleField.getText().isEmpty() == true
                || femaleField.getText().isEmpty() == true || wiredField.getText().isEmpty() == true || wirelessUsbField.getText().isEmpty() || bluetoothField.getText().isEmpty() == true
                || priceField.getText().isEmpty() == true)){
            int ID = Integer.parseInt(idField.getText());
            String brand = brandField.getText();
            String model = modelField.getText();
            String type = typeField.getText();
            String size = sizeField.getText();
            String color = colorField.getText();
            int year = Integer.parseInt(yearField.getText());
            String male = maleField.getText();
            String female = femaleField.getText();
            boolean wired = Boolean.parseBoolean(wiredField.getText());
            boolean wirelessUsb = Boolean.parseBoolean(wirelessUsbField.getText());
            boolean bluetooth = Boolean.parseBoolean(bluetoothField.getText());
            double price = Double.parseDouble(priceField.getText());
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("IO Device") && product.getID() == Integer.parseInt(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 1).toString())){
                    IODevice ioDevice = (IODevice) product;
                    ioDevice.setID(ID);
                    ioDevice.setBrand(brand);
                    ioDevice.setModel(model);
                    ioDevice.setType(type);
                    ioDevice.setSize(size);
                    ioDevice.setColor(color);
                    ioDevice.setManufactureYear(year);
                    ioDevice.setMaleConnector(male);
                    ioDevice.setFemaleConnector(female);
                    ioDevice.setWiredConnection(wired);
                    ioDevice.setWirelessUsbConnection(wirelessUsb);
                    ioDevice.setBluetoothConnection(bluetooth);
                    ioDevice.setPrice(price);
                    break;
                }
            }
            ioDeviceTableModel.setRowCount(0);
            int index = 0;
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("IO Device")){
                    IODevice ioDevice = (IODevice) product;
                    ioDeviceTableModel.addRow(new Object[] {++index, ioDevice.getID(), ioDevice.getBrand(),
                        ioDevice.getModel(), ioDevice.getType(), ioDevice.getSize(),
                        ioDevice.getColor(), ioDevice.getManufactureYear(),
                        ioDevice.getMaleConnector(), ioDevice.getFemaleConnector(),
                        ioDevice.getWiredConnection(), ioDevice.getWirelessUsbConnection(),
                        ioDevice.getBluetoothConnection(), ioDevice.getPrice()});
            }
        }
            idField.setText("");
            brandField.setText("");
            modelField.setText("");
            typeField.setText("");
            sizeField.setText("");
            colorField.setText("");
            yearField.setText("");
            maleField.setText("");
            femaleField.setText("");
            wiredField.setText("");
            wirelessUsbField.setText("");
            bluetoothField.setText("");
            priceField.setText("");
            JOptionPane.showMessageDialog(this, "Successfully Updated", "IO Device updated", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Please fill up all the values!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Delete the current product
        DefaultTableModel ioDeviceTableModel = (DefaultTableModel) ioDeviceTable.getModel();
        if(ioDeviceTable.getSelectedRowCount()==1){
            Product foundIoDevice = Inventory.products.stream().filter(ioDevice -> ioDevice.getID() == Integer.parseInt(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 1).toString())).findFirst().orElse(null);
            Order.products.add(foundIoDevice);
            Inventory.products.removeIf(ioDevice -> ioDevice.getID() == foundIoDevice.getID() && ioDevice.getModel().equals(foundIoDevice.getModel()));
            ioDeviceTableModel.removeRow(ioDeviceTable.getSelectedRow());
            ioDeviceTableModel.setRowCount(0);
            int index = 0;
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("IO Device")){
                    IODevice ioDevice = (IODevice) product;
                    ioDeviceTableModel.addRow(new Object[] {++index, ioDevice.getID(), ioDevice.getBrand(),
                        ioDevice.getModel(), ioDevice.getType(), ioDevice.getSize(),
                        ioDevice.getColor(), ioDevice.getManufactureYear(),
                        ioDevice.getMaleConnector(), ioDevice.getFemaleConnector(),
                        ioDevice.getWiredConnection(), ioDevice.getWirelessUsbConnection(),
                        ioDevice.getBluetoothConnection(), ioDevice.getPrice()});
            }
        }
        idField.setText("");
        brandField.setText("");
        modelField.setText("");
        typeField.setText("");
        sizeField.setText("");
        colorField.setText("");
        yearField.setText("");
        maleField.setText("");
        femaleField.setText("");
        wiredField.setText("");
        wirelessUsbField.setText("");
        bluetoothField.setText("");
        priceField.setText("");
        JOptionPane.showMessageDialog(this, "Successfully Deleted", "IO Device has been deleted", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Table is empty");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addToOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToOrderButtonActionPerformed
        // Add the product to the order
        DefaultTableModel ioDeviceTableModel = (DefaultTableModel) ioDeviceTable.getModel();
        if(ioDeviceTable.getSelectedRowCount()==1){
            Product foundIoDevice = Inventory.products.stream().filter(ioDevice -> ioDevice.getID() == Integer.parseInt(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 1).toString())).findFirst().orElse(null);
            Order.products.add(foundIoDevice);
            Inventory.products.removeIf(ioDevice -> ioDevice.getID() == foundIoDevice.getID() && ioDevice.getModel().equals(foundIoDevice.getModel()));
            ioDeviceTableModel.removeRow(ioDeviceTable.getSelectedRow());
            ioDeviceTableModel.setRowCount(0);
            int index = 0;
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("IO Device")){
                    IODevice ioDevice = (IODevice) product;
                    ioDeviceTableModel.addRow(new Object[] {++index, ioDevice.getID(), ioDevice.getBrand(),
                        ioDevice.getModel(), ioDevice.getType(), ioDevice.getSize(),
                        ioDevice.getColor(), ioDevice.getManufactureYear(),
                        ioDevice.getMaleConnector(), ioDevice.getFemaleConnector(),
                        ioDevice.getWiredConnection(), ioDevice.getWirelessUsbConnection(),
                        ioDevice.getBluetoothConnection(), ioDevice.getPrice()});
            }
        }
        idField.setText("");
        brandField.setText("");
        modelField.setText("");
        typeField.setText("");
        sizeField.setText("");
        colorField.setText("");
        yearField.setText("");
        maleField.setText("");
        femaleField.setText("");
        wiredField.setText("");
        wirelessUsbField.setText("");
        bluetoothField.setText("");
        priceField.setText("");
        JOptionPane.showMessageDialog(this, "Successfully Added to Order", "IO Device added to order", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a product", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addToOrderButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // Close the current window and return to the main menu
        this.dispose();
        MainMenu mainMenu = new MainMenu();
        mainMenu.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void ioDeviceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ioDeviceTableMouseClicked
        // Set the input fields to the current data of the selected product
        DefaultTableModel ioDeviceTableModel = (DefaultTableModel) ioDeviceTable.getModel();
        idField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 1).toString());
        brandField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 2).toString());
        modelField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 3).toString());
        typeField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 4).toString());
        sizeField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 5).toString());
        colorField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 6).toString());
        yearField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 7).toString());
        maleField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 8).toString());
        femaleField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 9).toString());
        wiredField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 10).toString());
        wirelessUsbField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 11).toString());
        bluetoothField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 12).toString());
        priceField.setText(ioDeviceTableModel.getValueAt(ioDeviceTable.getSelectedRow(), 13).toString());
    }//GEN-LAST:event_ioDeviceTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IODeviceMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IODeviceMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IODeviceMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IODeviceMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IODeviceMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addToOrderButton;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField bluetoothField;
    private javax.swing.JLabel bluetoothLabel;
    private javax.swing.JTextField brandField;
    private javax.swing.JLabel brandLabel;
    private javax.swing.JTextField colorField;
    private javax.swing.JLabel colorLabel;
    private java.awt.Panel computerPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField femaleField;
    private javax.swing.JLabel femaleLabel;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel ioDeviceMenuLabel;
    private javax.swing.JTable ioDeviceTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField maleField;
    private javax.swing.JLabel maleLabel;
    private javax.swing.JTextField modelField;
    private javax.swing.JLabel modelLabel;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceLabel1;
    private javax.swing.JTextField sizeField;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JTextField typeField;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField wiredField;
    private javax.swing.JLabel wiredLabel;
    private javax.swing.JTextField wirelessUsbField;
    private javax.swing.JLabel wirelessUsbLabel;
    private javax.swing.JTextField yearField;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables
}
