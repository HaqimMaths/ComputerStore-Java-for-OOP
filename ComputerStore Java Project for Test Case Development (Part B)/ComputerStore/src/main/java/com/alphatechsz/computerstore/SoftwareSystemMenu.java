/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.alphatechsz.computerstore;

import java.awt.Color;
import javax.swing.*;
import javax.swing.table.*;

/**
 *
 * @author Haqim
 */
public class SoftwareSystemMenu extends javax.swing.JFrame {

    /**
     * Creates new form SoftwareSystemMenu
     */
    public SoftwareSystemMenu() {
        initComponents();
        // Set background color
        getContentPane().setBackground(new Color(164, 219, 232));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        softwareSystemTable = new javax.swing.JTable();
        softwareSystemMenuLabel = new javax.swing.JLabel();
        computerPanel = new java.awt.Panel();
        idLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        brandLabel = new javax.swing.JLabel();
        modelLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        yearLabel = new javax.swing.JLabel();
        colorLabel = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        brandField = new javax.swing.JTextField();
        modelField = new javax.swing.JTextField();
        typeField = new javax.swing.JTextField();
        sizeField = new javax.swing.JTextField();
        colorField = new javax.swing.JTextField();
        yearField = new javax.swing.JTextField();
        priceField = new javax.swing.JTextField();
        licenseLabel = new javax.swing.JLabel();
        windowsLabel = new javax.swing.JLabel();
        macLabel = new javax.swing.JLabel();
        linuxLabel = new javax.swing.JLabel();
        licenseField = new javax.swing.JTextField();
        windowsField = new javax.swing.JTextField();
        macField = new javax.swing.JTextField();
        linuxField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        addToOrderButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(new ImageIcon("C:\\Users\\Haqim\\Documents\\MSU\\S4\\CSE20203\\A2\\OOP\\LAB REPORT (A3)\\ComputerStore\\src\\main\\java\\com\\alphatechsz\\computerstore\\AlphaTechszLogo.png").getImage());

        String[] columnNames = {"No", "ID", "Brand", "Model", "Type",
            "Size", "Color", "Year", "License", "Windows", "macOS",
            "Linux", "Price(RM)"
        };

        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        int index = 0;
        for(Product product : Inventory.products){
            if(product.getCategory().equalsIgnoreCase("Software System")){
                SoftwareSystem softwareSystem = (SoftwareSystem) product;
                model.addRow(new Object[] {++index, softwareSystem.getID(), softwareSystem.getBrand(),
                    softwareSystem.getModel(), softwareSystem.getType(), softwareSystem.getSize(),
                    softwareSystem.getColor(), softwareSystem.getManufactureYear(),
                    softwareSystem.getLicenseType(), softwareSystem.getCompatibleWithWindows(),
                    softwareSystem.getCompatibleWithMac(), softwareSystem.getCompatibleWithLinux(),
                    softwareSystem.getPrice()});
        }
    }
    softwareSystemTable.setModel(model);
    softwareSystemTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            softwareSystemTableMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(softwareSystemTable);

    softwareSystemMenuLabel.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 24)); // NOI18N
    softwareSystemMenuLabel.setText("Software System Menu");

    idLabel.setText("ID:");

    idField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            idFieldActionPerformed(evt);
        }
    });

    brandLabel.setText("Brand:");

    modelLabel.setText("Model:");

    priceLabel.setText("Price (RM):");

    yearLabel.setText("Year:");

    colorLabel.setText("Color:");

    sizeLabel.setText("Size:");

    typeLabel.setText("Type:");

    licenseLabel.setText("License:");

    windowsLabel.setText("Windows:");

    macLabel.setText("Mac:");

    linuxLabel.setText("Linux:");

    macField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            macFieldActionPerformed(evt);
        }
    });

    addButton.setText("Add");
    addButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addButtonActionPerformed(evt);
        }
    });

    updateButton.setText("Update");
    updateButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateButtonActionPerformed(evt);
        }
    });

    deleteButton.setText("Delete");
    deleteButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteButtonActionPerformed(evt);
        }
    });

    addToOrderButton.setText("Add to Order");
    addToOrderButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addToOrderButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout computerPanelLayout = new javax.swing.GroupLayout(computerPanel);
    computerPanel.setLayout(computerPanelLayout);
    computerPanelLayout.setHorizontalGroup(
        computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(computerPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(computerPanelLayout.createSequentialGroup()
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(yearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(idField, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                        .addComponent(yearField))
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addGap(100, 100, 100)
                            .addComponent(brandField, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addGap(45, 45, 45)
                            .addComponent(brandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addGap(44, 44, 44)
                            .addComponent(licenseLabel)
                            .addGap(18, 18, 18)
                            .addComponent(licenseField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(26, 26, 26)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addComponent(modelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(modelField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addComponent(windowsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(windowsField)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(typeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(macLabel))
                    .addGap(22, 22, 22)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(macField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(28, 28, 28)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(linuxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(colorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(15, 15, 15))
                        .addGroup(computerPanelLayout.createSequentialGroup()
                            .addComponent(linuxField)
                            .addGap(16, 16, 16)
                            .addComponent(priceLabel)
                            .addGap(13, 13, 13)))
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(colorField, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                        .addComponent(priceField))
                    .addGap(15, 15, 15))
                .addGroup(computerPanelLayout.createSequentialGroup()
                    .addGap(221, 221, 221)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(updateButton)
                    .addGap(18, 18, 18)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(addToOrderButton)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );
    computerPanelLayout.setVerticalGroup(
        computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(computerPanelLayout.createSequentialGroup()
            .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(computerPanelLayout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(idLabel))
                .addGroup(computerPanelLayout.createSequentialGroup()
                    .addGap(17, 17, 17)
                    .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(brandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(brandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(modelLabel)
                        .addComponent(modelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(typeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sizeLabel)
                        .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(colorLabel)
                        .addComponent(colorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGap(24, 24, 24)
            .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(yearLabel)
                .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(licenseLabel)
                .addComponent(licenseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(windowsLabel)
                .addComponent(windowsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(macLabel)
                .addComponent(macField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(linuxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(linuxLabel)
                .addComponent(priceLabel)
                .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(27, 27, 27)
            .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addButton)
                .addComponent(updateButton)
                .addComponent(deleteButton)
                .addComponent(addToOrderButton))
            .addContainerGap(42, Short.MAX_VALUE))
    );

    backButton.setText("Back");
    backButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            backButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(20, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(computerPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                    .addGap(523, 523, 523)
                    .addComponent(backButton)))
            .addGap(45, 45, 45))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(softwareSystemMenuLabel)
            .addGap(448, 448, 448))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addComponent(softwareSystemMenuLabel)
            .addGap(27, 27, 27)
            .addComponent(computerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(backButton)
            .addContainerGap(51, Short.MAX_VALUE))
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idFieldActionPerformed

    private void macFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_macFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_macFieldActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        // Check if one of the fields is empty
        if(!(idField.getText().isEmpty() == true || brandField.getText().isEmpty() == true || modelField.getText().isEmpty() == true || typeField.getText().isEmpty() == true
                || sizeField.getText().isEmpty() == true || colorField.getText().isEmpty() == true || yearField.getText().isEmpty() == true || licenseField.getText().isEmpty() == true
                || windowsField.getText().isEmpty() == true || macField.getText().isEmpty() == true || linuxField.getText().isEmpty() || priceField.getText().isEmpty() == true)){
            int ID = Integer.parseInt(idField.getText());
            String brand = brandField.getText();
            String model = modelField.getText();
            String type = typeField.getText();
            String size = sizeField.getText();
            String color = colorField.getText();
            int year = Integer.parseInt(yearField.getText());
            String license = licenseField.getText();
            boolean windows = Boolean.parseBoolean(windowsField.getText());
            boolean mac = Boolean.parseBoolean(macField.getText());
            boolean linux = Boolean.parseBoolean(linuxField.getText());
            double price = Double.parseDouble(priceField.getText());
            Inventory.products.add(new SoftwareSystem(ID, brand, model, type, size, color, year,license, windows, mac, linux, price));
            DefaultTableModel softwareSystemTableModel = (DefaultTableModel) softwareSystemTable.getModel();
            softwareSystemTableModel.setRowCount(0);
            int index = 0;
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("Software System")){
                    SoftwareSystem softwareSystem = (SoftwareSystem) product;
                    softwareSystemTableModel.addRow(new Object[] {++index, softwareSystem.getID(), softwareSystem.getBrand(),
                        softwareSystem.getModel(), softwareSystem.getType(), softwareSystem.getSize(),
                        softwareSystem.getColor(), softwareSystem.getManufactureYear(),
                        softwareSystem.getLicenseType(), softwareSystem.getCompatibleWithWindows(),
                        softwareSystem.getCompatibleWithMac(), softwareSystem.getCompatibleWithLinux(),
                        softwareSystem.getPrice()});
                }
            }
            JOptionPane.showMessageDialog(this, "Successfully Added", "Software system has been added", JOptionPane.INFORMATION_MESSAGE);
            idField.setText("");
            brandField.setText("");
            modelField.setText("");
            typeField.setText("");
            sizeField.setText("");
            colorField.setText("");
            yearField.setText("");
            licenseField.setText("");
            windowsField.setText("");
            macField.setText("");
            linuxField.setText("");
            priceField.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Please fill up all the values!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // Update the current selected data information
        DefaultTableModel softwareSystemTableModel = (DefaultTableModel) softwareSystemTable.getModel();
        if(!(idField.getText().isEmpty() == true || brandField.getText().isEmpty() == true || modelField.getText().isEmpty() == true || typeField.getText().isEmpty() == true
                || sizeField.getText().isEmpty() == true || colorField.getText().isEmpty() == true || yearField.getText().isEmpty() == true || licenseField.getText().isEmpty() == true
                || windowsField.getText().isEmpty() == true || macField.getText().isEmpty() == true || linuxField.getText().isEmpty() || priceField.getText().isEmpty() == true)){
            int ID = Integer.parseInt(idField.getText());
            String brand = brandField.getText();
            String model = modelField.getText();
            String type = typeField.getText();
            String size = sizeField.getText();
            String color = colorField.getText();
            int year = Integer.parseInt(yearField.getText());
            String license = licenseField.getText();
            boolean windows = Boolean.parseBoolean(windowsField.getText());
            boolean mac = Boolean.parseBoolean(macField.getText());
            boolean linux = Boolean.parseBoolean(linuxField.getText());
            double price = Double.parseDouble(priceField.getText());
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("Software System") && product.getID() == Integer.parseInt(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 1).toString())){
                    SoftwareSystem softwareSystem = (SoftwareSystem) product;
                    softwareSystem.setID(ID);
                    softwareSystem.setBrand(brand);
                    softwareSystem.setModel(model);
                    softwareSystem.setType(type);
                    softwareSystem.setSize(size);
                    softwareSystem.setColor(color);
                    softwareSystem.setManufactureYear(year);
                    softwareSystem.setLicenseType(license);
                    softwareSystem.setCompatibleWithWindows(windows);
                    softwareSystem.setCompatibleWithMac(mac);
                    softwareSystem.setCompatibleWithLinux(linux);
                    softwareSystem.setPrice(price);
                    break;
                }
            }
            softwareSystemTableModel.setRowCount(0);
            int index = 0;
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("Software System")){
                    SoftwareSystem softwareSystem = (SoftwareSystem) product;
                    softwareSystemTableModel.addRow(new Object[] {++index, softwareSystem.getID(), softwareSystem.getBrand(),
                        softwareSystem.getModel(), softwareSystem.getType(), softwareSystem.getSize(),
                        softwareSystem.getColor(), softwareSystem.getManufactureYear(),
                        softwareSystem.getLicenseType(), softwareSystem.getCompatibleWithWindows(),
                        softwareSystem.getCompatibleWithMac(), softwareSystem.getCompatibleWithLinux(),
                        softwareSystem.getPrice()});
            }
        }
            idField.setText("");
            brandField.setText("");
            modelField.setText("");
            typeField.setText("");
            sizeField.setText("");
            colorField.setText("");
            yearField.setText("");
            licenseField.setText("");
            windowsField.setText("");
            macField.setText("");
            linuxField.setText("");
            priceField.setText("");
            JOptionPane.showMessageDialog(this, "Successfully Updated", "Software system has been updated", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Please fill up all the values!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Delete the current selected data
        DefaultTableModel softwareSystemTableModel = (DefaultTableModel) softwareSystemTable.getModel();
        if(softwareSystemTable.getSelectedRowCount()==1){
            Product foundSoftwareSystem = Inventory.products.stream().filter(softwareSystem -> softwareSystem.getID() == Integer.parseInt(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 1).toString())).findFirst().orElse(null);
            Order.products.add(foundSoftwareSystem);
            Inventory.products.removeIf(softwareSystem -> softwareSystem.getID() == foundSoftwareSystem.getID() && softwareSystem.getModel().equals(foundSoftwareSystem.getModel()));
            softwareSystemTableModel.removeRow(softwareSystemTable.getSelectedRow());
            softwareSystemTableModel.setRowCount(0);
            int index = 0;
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("Software System")){
                    SoftwareSystem softwareSystem = (SoftwareSystem) product;
                    softwareSystemTableModel.addRow(new Object[] {++index, softwareSystem.getID(), softwareSystem.getBrand(),
                        softwareSystem.getModel(), softwareSystem.getType(), softwareSystem.getSize(),
                        softwareSystem.getColor(), softwareSystem.getManufactureYear(),
                        softwareSystem.getLicenseType(), softwareSystem.getCompatibleWithWindows(),
                        softwareSystem.getCompatibleWithMac(), softwareSystem.getCompatibleWithLinux(),
                        softwareSystem.getPrice()});
            }
        }
        idField.setText("");
        brandField.setText("");
        modelField.setText("");
        typeField.setText("");
        sizeField.setText("");
        colorField.setText("");
        yearField.setText("");
        licenseField.setText("");
        windowsField.setText("");
        macField.setText("");
        linuxField.setText("");
        priceField.setText("");
        JOptionPane.showMessageDialog(this, "Successfully Deleted", "Software system has been deleted", JOptionPane.INFORMATION_MESSAGE);
        } else{
            JOptionPane.showMessageDialog(this, "Please select a product", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addToOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToOrderButtonActionPerformed
        // Add the product to the order
        DefaultTableModel softwareSystemTableModel = (DefaultTableModel) softwareSystemTable.getModel();
        if(softwareSystemTable.getSelectedRowCount()==1){
            Product foundSoftwareSystem = Inventory.products.stream().filter(softwareSystem -> softwareSystem.getID() == Integer.parseInt(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 1).toString())).findFirst().orElse(null);
            Order.products.add(foundSoftwareSystem);
            Inventory.products.removeIf(softwareSystem -> softwareSystem.getID() == foundSoftwareSystem.getID() && softwareSystem.getModel().equals(foundSoftwareSystem.getModel()));
            softwareSystemTableModel.removeRow(softwareSystemTable.getSelectedRow());
            softwareSystemTableModel.setRowCount(0);
            int index = 0;
            for(Product product : Inventory.products){
                if(product.getCategory().equalsIgnoreCase("Software System")){
                    SoftwareSystem softwareSystem = (SoftwareSystem) product;
                    softwareSystemTableModel.addRow(new Object[] {++index, softwareSystem.getID(), softwareSystem.getBrand(),
                        softwareSystem.getModel(), softwareSystem.getType(), softwareSystem.getSize(),
                        softwareSystem.getColor(), softwareSystem.getManufactureYear(),
                        softwareSystem.getLicenseType(), softwareSystem.getCompatibleWithWindows(),
                        softwareSystem.getCompatibleWithMac(), softwareSystem.getCompatibleWithLinux(),
                        softwareSystem.getPrice()});
            }
        }
        idField.setText("");
        brandField.setText("");
        modelField.setText("");
        typeField.setText("");
        sizeField.setText("");
        colorField.setText("");
        yearField.setText("");
        licenseField.setText("");
        windowsField.setText("");
        macField.setText("");
        linuxField.setText("");
        priceField.setText("");
        JOptionPane.showMessageDialog(this, "Successfully Added to Order", "Software system has been added to order", JOptionPane.INFORMATION_MESSAGE);
        } else{
            JOptionPane.showMessageDialog(this, "Please select a product", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addToOrderButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // Return to the main menu
        this.dispose();
        MainMenu mainMenu = new MainMenu();
        mainMenu.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void softwareSystemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_softwareSystemTableMouseClicked
        // Set the input fields to the current selected product data
        DefaultTableModel softwareSystemTableModel = (DefaultTableModel) softwareSystemTable.getModel();
        idField.setText(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 1).toString());
        brandField.setText(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 2).toString());
        modelField.setText(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 3).toString());
        typeField.setText(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 4).toString());
        sizeField.setText(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 5).toString());
        colorField.setText(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 6).toString());
        yearField.setText(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 7).toString());
        licenseField.setText(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 8).toString());
        windowsField.setText(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 9).toString());
        macField.setText(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 10).toString());
        linuxField.setText(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 11).toString());
        priceField.setText(softwareSystemTableModel.getValueAt(softwareSystemTable.getSelectedRow(), 12).toString());
    }//GEN-LAST:event_softwareSystemTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SoftwareSystemMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SoftwareSystemMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SoftwareSystemMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SoftwareSystemMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SoftwareSystemMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addToOrderButton;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField brandField;
    private javax.swing.JLabel brandLabel;
    private javax.swing.JTextField colorField;
    private javax.swing.JLabel colorLabel;
    private java.awt.Panel computerPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField licenseField;
    private javax.swing.JLabel licenseLabel;
    private javax.swing.JTextField linuxField;
    private javax.swing.JLabel linuxLabel;
    private javax.swing.JTextField macField;
    private javax.swing.JLabel macLabel;
    private javax.swing.JTextField modelField;
    private javax.swing.JLabel modelLabel;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField sizeField;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JLabel softwareSystemMenuLabel;
    private javax.swing.JTable softwareSystemTable;
    private javax.swing.JTextField typeField;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField windowsField;
    private javax.swing.JLabel windowsLabel;
    private javax.swing.JTextField yearField;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables
}
